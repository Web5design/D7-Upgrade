<?php

/**
 * Implements hook_menu().
 */
function cdt_issues_menu() {
  $items = array();
  $items['migrate/issues'] = array(
    'title' => 'Migrate CDT Issues',
    'description' => 'Migrate Issue content to Issues taxonomy.',
    'page callback' => 'cdt_issues_issues',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Create a taxonomy term and return the term.
 */
function _cdt_issues_create_taxonomy_term($vid, $name, $parent = NULL) {
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $vid;
  if (isset($parent)) {
    $term->parent = $parent;
  }
  taxonomy_term_save($term);
  return $term;
}

/**
 * Search for a taxonomy issue term with the given name
 */
function _cdt_issues_find_term($vid, $name, $parent = NULL) {
  $tid = false;
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->propertyCondition('name', $name);
  $query->propertyCondition('vid', $vid);
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    foreach ($result['taxonomy_term'] as $id => $row) {
      $current_parent = db_select('taxonomy_term_hierarchy', 't')
        ->fields('t', array('parent'))
        ->condition('tid', $id)
        ->execute()
        ->fetchField();
      if (isset($parent)) {
        if ($parent == $current_parent) {
          $tid = $id;
          break;
        }
      }
      else {
        if ($current_parent == 0) {
          $tid = $id;
          break;
        }
      }
    }
  }
  return $tid;
}

/**
 * Helper function to set the field in $term from a field in $node
 * @param  Taxonomy object &$term - object to modify
 * @param  Node $node  - node to extract field from
 * @param  string $field - name of field to copy
 * @param  string $dest  - optional field name destination
 */
function _cdt_issues_set_field(&$term, $node, $field, $dest = NULL) {
  if (isset($node->{$field}['und'][0]['value'])) {
    if (isset($dest)) {
      $term->{$dest} = $node->{$field}['und'][0]['value'];
    }
    else {
      $term->{$field}['und'][0]['value'] = $node->{$field}['und'][0]['value'];
    }
  }
  elseif (isset($node->{$field}['und'][0]['fid'])) {
    $term->{$field}['und'][0]['fid'] = $node->{$field}['und'][0]['fid'];
  }
}


function cdt_issues_issues() {
  $output = '';
  // Find/Create Issue taxonomy
  $vocabs = taxonomy_get_vocabularies();
  $vid = NULL;
  foreach ($vocabs as $vocab) {
    if ($vocab->machine_name == 'issues') {
      $vid = $vocab->vid;
      break;
    }
  }
  if (!isset($vid)) {
    // create vocabulary using Features import to get extra fields added
    drupal_set_message('Please create "issues" taxonomy.', 'error');
    return $output;
  }

  // Get list of Parent nodes
  $parents = db_query("SELECT nid, title FROM {node} WHERE type = 'parent'");
  foreach ($parents as $issue) {
    $tid = _cdt_issues_find_term($vid, $issue->title);
    if ($tid) {
      $term = taxonomy_term_load($tid);
    }
    else {
      // create a new parent term
      $term = _cdt_issues_create_taxonomy_term($vid, $issue->title);
    }
    $node = node_load($issue->nid);
    _cdt_issues_set_field($term, $node, 'field_intro', 'description');
    $fields = array('field_all_about', 'field_issue_header', 'field_issue_placeholder', 'field_parent_video');
    foreach ($fields as $field) {
      _cdt_issues_set_field($term, $node, $field);
    }
    $output .= "Updated Parent term: " . $issue->title . "<br>\n";
    taxonomy_term_save($term);
    $output .= _cdt_issues_child_issues($vid, $node->nid, $term->tid);
  }
  return $output;
}

/**
 * Migrate Child issues
 * @param  int $vid - id of vocabulary
 * @param  int $parent_nid - ID of old parent node
 * @param  int $parent_tid - TID of parent term
 */
function _cdt_issues_child_issues($vid, $parent_nid, $parent_tid) {
  $output = '';
  // Get list of Child nodes
  $children = db_query("SELECT nid, title FROM {node} WHERE type = 'child'");
  foreach ($children as $child) {
    $node = node_load($child->nid);
    if (isset($node->field_child_parent['und'][0]['nid']) && ($node->field_child_parent['und'][0]['nid'] == $parent_nid)) {
      $tid = _cdt_issues_find_term($vid, $child->title, $parent_tid);
      if ($tid) {
        $term = taxonomy_term_load($tid);
        $term->parent = $parent_tid;
      }
      else {
        // create a new parent term
        $term = _cdt_issues_create_taxonomy_term($vid, $child->title, $parent_tid);
      }
      _cdt_issues_set_field($term, $node, 'field_intro', 'description');
      $fields = array('field_issue_header', 'field_issue_placeholder', 'field_parent_video');
      foreach ($fields as $field) {
        _cdt_issues_set_field($term, $node, $field);
      }
      $output .= "&nbsp;&nbsp;Updated Child term: " . $child->title . "<br>\n";
      taxonomy_term_save($term);
      $output .= _cdt_issues_grandchild_issues($vid, $node->nid, $term->tid);
    }
  }
  return $output;
}

/**
 * Migrate Grandchild issues
 * @param  int $vid - id of vocabulary
 * @param  int $parent_nid - ID of old parent node
 * @param  int $parent_tid - TID of parent term
 */
function _cdt_issues_grandchild_issues($vid, $parent_nid, $parent_tid) {
  $output = '';
  // Get list of Grandchild nodes
  $children = db_query("SELECT nid, title FROM {node} WHERE type = 'grandchild'");
  foreach ($children as $child) {
    $node = node_load($child->nid);
    if (isset($node->field_grandchild_child['und'][0]['nid']) && ($node->field_grandchild_child['und'][0]['nid'] == $parent_nid)) {
      $tid = _cdt_issues_find_term($vid, $child->title, $parent_tid);
      if ($tid) {
        $term = taxonomy_term_load($tid);
        $term->parent = $parent_tid;
      }
      else {
        // create a new parent term
        $term = _cdt_issues_create_taxonomy_term($vid, $child->title, $parent_tid);
      }
      _cdt_issues_set_field($term, $node, 'body', 'description');
      $output .= "&nbsp;&nbsp;&nbsp;&nbsp;Updated Grandchild term: " . $child->title . "<br>\n";
      taxonomy_term_save($term);
    }
  }
  return $output;
}

